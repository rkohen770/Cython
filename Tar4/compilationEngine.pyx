# Gets its input from a JackTokenizer, and emits its output to an output file

# The output is generated by a series of compilexxx routines,
# structured according to the grammar rules that define xxx

# Each compilexxx routine is responsible for handling all the tokens that make up 
#xxx, advancing the tokenizer exactly beyond these tokens, and outputing the parsing of xxx.

# Thus, compilexxx may only be called if indeed xxx is the next thing in the input.

import os

cdef class CompilationEngine:
    cdef object tokenizer
    cdef object output_file
    cdef int indent
    


    # Constructor
    def __cinit__(self, tokenizer, output_file):
        self.tokenizer = tokenizer
        self.output_file = output_file
        self.indent = 0
        self.compileClass()

    # Compiles a complete class
    cdef compileClass(self):
        self.output_file.write("<class>\n")
        self.indent += 1
        self.output_file.write(self.indent*"  " + self.tokenizer.keyWord() + "\n")
        self.output_file.write(self.indent*"  " + self.tokenizer.identifier() + "\n")
        self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
        while self.tokenizer.tokenType() == "KEYWORD" and self.tokenizer.keyWord() in ["STATIC", "FIELD"]:
            self.compileClassVarDec()
        while self.tokenizer.tokenType() == "KEYWORD" and self.tokenizer.keyWord() in ["CONSTRUCTOR", "FUNCTION", "METHOD"]:
            self.compileSubroutine()
        self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
        self.indent -= 1
        self.output_file.write("</class>\n")

    # Compiles a static declaration or a field declaration
    cdef compileClassVarDec(self):
        self.output_file.write(self.indent*"  " + "<classVarDec>\n")
        self.indent += 1
        self.output_file.write(self.indent*"  " + self.tokenizer.keyWord() + "\n")
        self.compileType()
        self.output_file.write(self.indent*"  " + self.tokenizer.identifier() + "\n")
        while self.tokenizer.tokenType() == "SYMBOL" and self.tokenizer.symbol() == ",":
            self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
            self.output_file.write(self.indent*"  " + self.tokenizer.identifier() + "\n")
        self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
        self.indent -= 1
        self.output_file.write(self.indent*"  " + "</classVarDec>\n")

    # Compiles a complete method, function, or constructor
    cdef compileSubroutine(self):
        self.output_file.write(self.indent*"  " + "<subroutineDec>\n")
        self.indent += 1
        self.output_file.write(self.indent*"  " + self.tokenizer.keyWord() + "\n")
        if self.tokenizer.tokenType() == "KEYWORD" and self.tokenizer.keyWord() == "VOID":
            self.output_file.write(self.indent*"  " + self.tokenizer.keyWord() + "\n")
        else:
            self.compileType()
        self.output_file.write(self.indent*"  " + self.tokenizer.identifier() + "\n")
        self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
        self.compileParameterList()
        self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
        self.compileSubroutineBody()
        self.indent -= 1
        self.output_file.write(self.indent*"  " + "</subroutineDec>\n")

    # Compiles a (possibly empty) parameter list, not including the enclosing "()"
    cdef compileParameterList(self):
        self.output_file.write(self.indent*"  " + "<parameterList>\n")
        self.indent += 1
        if self.tokenizer.tokenType() == "KEYWORD" and self.tokenizer.keyWord() == "VOID":
            self.output_file.write(self.indent*"  " + self.tokenizer.keyWord() + "\n")
        else:
            self.compileType()
            self.output_file.write(self.indent*"  " + self.tokenizer.identifier() + "\n")
            while self.tokenizer.tokenType() == "SYMBOL" and self.tokenizer.symbol() == ",":
                self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
                self.compileType()
                self.output_file.write(self.indent*"  " + self.tokenizer.identifier() + "\n")
        self.indent -= 1
        self.output_file.write(self.indent*"  " + "</parameterList>\n")

    # Compiles a subroutine's body
    cdef compileSubroutineBody(self):
        self.output_file.write(self.indent*"  " + "<subroutineBody>\n")
        self.indent += 1
        self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
        while self.tokenizer.tokenType() == "KEYWORD" and self.tokenizer.keyWord() == "VAR":
            self.compileVarDec()
        self.compileStatements()
        self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
        self.indent -= 1
        self.output_file.write(self.indent*"  " + "</subroutineBody>\n")

    # Compiles a var declaration
    cdef compileVarDec(self):
        self.output_file.write(self.indent*"  " + "<varDec>\n")
        self.indent += 1
        self.output_file.write(self.indent*"  " + self.tokenizer.keyWord() + "\n")
        self.compileType()
        self.output_file.write(self.indent*"  " + self.tokenizer.identifier() + "\n")
        while self.tokenizer.tokenType() == "SYMBOL" and self.tokenizer.symbol() == ",":
            self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
            self.output_file.write(self.indent*"  " + self.tokenizer.identifier() + "\n")
        self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
        self.indent -= 1
        self.output_file.write(self.indent*"  " + "</varDec>\n")

    # Compiles a sequence of statements, not including the enclosing "{}"
    cdef compileStatements(self):
        self.output_file.write(self.indent*"  " + "<statements>\n")
        self.indent += 1
        while self.tokenizer.tokenType() == "KEYWORD" and self.tokenizer.keyWord() in ["LET", "IF", "WHILE", "DO", "RETURN"]:
            if self.tokenizer.keyWord() == "LET":
                self.compileLet()
            elif self.tokenizer.keyWord() == "IF":
                self.compileIf()
            elif self.tokenizer.keyWord() == "WHILE":
                self.compileWhile()
            elif self.tokenizer.keyWord() == "DO":
                self.compileDo()
            elif self.tokenizer.keyWord() == "RETURN":
                self.compileReturn()
        self.indent -= 1
        self.output_file.write(self.indent*"  " + "</statements>\n")

    # Compiles a let statement
    cdef compileLet(self):
        self.output_file.write(self.indent*"  " + "<letStatement>\n")
        self.indent += 1
        self.output_file.write(self.indent*"  " + self.tokenizer.keyWord() + "\n")
        self.output_file.write(self.indent*"  " + self.tokenizer.identifier() + "\n")
        if self.tokenizer.tokenType() == "SYMBOL" and self.tokenizer.symbol() == "[":
            self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
            self.compileExpression()
            self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
        self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
        self.compileExpression()
        self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
        self.indent -= 1
        self.output_file.write(self.indent*"  " + "</letStatement>\n")

    # Compiles an if statement, possibly with a trailing else clause    
    cdef compileIf(self):
        self.output_file.write(self.indent*"  " + "<ifStatement>\n")
        self.indent += 1
        self.output_file.write(self.indent*"  " + self.tokenizer.keyWord() + "\n")
        self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
        self.compileExpression()
        self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
        self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
        self.compileStatements()
        self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
        if self.tokenizer.tokenType() == "KEYWORD" and self.tokenizer.keyWord() == "ELSE":
            self.output_file.write(self.indent*"  " + self.tokenizer.keyWord() + "\n")
            self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
            self.compileStatements()
            self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
        self.indent -= 1
        self.output_file.write(self.indent*"  " + "</ifStatement>\n")

    # Compiles a while statement
    cdef compileWhile(self):
        self.output_file.write(self.indent*"  " + "<whileStatement>\n")
        self.indent += 1
        self.output_file.write(self.indent*"  " + self.tokenizer.keyWord() + "\n")
        self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
        self.compileExpression()
        self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
        self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
        self.compileStatements()
        self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
        self.indent -= 1
        self.output_file.write(self.indent*"  " + "</whileStatement>\n")

    # Compiles a do statement
    cdef compileDo(self):
        self.output_file.write(self.indent*"  " + "<doStatement>\n")
        self.indent += 1
        self.output_file.write(self.indent*"  " + self.tokenizer.keyWord() + "\n")
        self.compileSubroutineCall()
        self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
        self.indent -= 1
        self.output_file.write(self.indent*"  " + "</doStatement>\n")

    # Compiles a return statement
    cdef compileReturn(self):
        self.output_file.write(self.indent*"  " + "<returnStatement>\n")
        self.indent += 1
        self.output_file.write(self.indent*"  " + self.tokenizer.keyWord() + "\n")
        if self.tokenizer.tokenType() != "SYMBOL" or self.tokenizer.symbol() != ";":
            self.compileExpression()
        self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
        self.indent -= 1
        self.output_file.write(self.indent*"  " + "</returnStatement>\n")

    # Compiles an expression
    cdef compileExpression(self):
        self.output_file.write(self.indent*"  " + "<expression>\n")
        self.indent += 1
        self.compileTerm()
        while self.tokenizer.tokenType() == "SYMBOL" and self.tokenizer.symbol() in ["+", "-", "*", "/", "&", "|", "<", ">", "="]:
            self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
            self.compileTerm()
        self.indent -= 1
        self.output_file.write(self.indent*"  " + "</expression>\n")

    # Compiles a term
    cdef compileTerm(self):
        self.output_file.write(self.indent*"  " + "<term>\n")
        self.indent += 1
        if self.tokenizer.tokenType() == "INT_CONST":
            self.output_file.write(self.indent*"  " + self.tokenizer.intVal() + "\n")
        elif self.tokenizer.tokenType() == "STRING_CONST":
            self.output_file.write(self.indent*"  " + self.tokenizer.stringVal() + "\n")
        elif self.tokenizer.tokenType() == "KEYWORD" and self.tokenizer.keyWord() in ["TRUE", "FALSE", "NULL", "THIS"]:
            self.output_file.write(self.indent*"  " + self.tokenizer.keyWord() + "\n")
        elif self.tokenizer.tokenType() == "SYMBOL" and self.tokenizer.symbol() == "(":
            self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
            self.compileExpression()
            self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
        elif self.tokenizer.tokenType() == "SYMBOL" and self.tokenizer.symbol() in ["-", "~"]:
            self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
            self.compileTerm()
        elif self.tokenizer.tokenType() == "IDENTIFIER":
            if self.tokenizer.tokenType() == "IDENTIFIER" and self.tokenizer.symbol() == "[":
                self.output_file.write(self.indent*"  " + self.tokenizer.identifier() + "\n")
                self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
                self.compileExpression()
                self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
            elif self.tokenizer.tokenType() == "IDENTIFIER" and self.tokenizer.symbol() == "(":
                self.compileSubroutineCall()
            elif self.tokenizer.tokenType() == "IDENTIFIER" and self.tokenizer.symbol() == ".":
                self.compileSubroutineCall()
            else:
                self.output_file.write(self.indent*"  " + self.tokenizer.identifier() + "\n")
        self.indent -= 1
        self.output_file.write(self.indent*"  " + "</term>\n")

    # Compiles a (possibly empty) comma-separated list of expressions
    cdef int compileExpressionList(self):
        self.output_file.write(self.indent*"  " + "<expressionList>\n")
        self.indent += 1
        if self.tokenizer.tokenType() != "SYMBOL" or self.tokenizer.symbol() != ")":
            self.compileExpression()
            while self.tokenizer.tokenType() == "SYMBOL" and self.tokenizer.symbol() == ",":
                self.output_file.write(self.indent*"  " + self.tokenizer.symbol() + "\n")
                self.compileExpression()
        self.indent -= 1
        self.output_file.write(self.indent*"  " + "</expressionList>\n")
