<tokens>
<identifier> import </identifier>
<identifier> keywords </identifier>
<symbol> = </symbol>
<symbol> [ </symbol>
<stringConstant> class </stringConstant>
<symbol> , </symbol>
<stringConstant> constructor </stringConstant>
<symbol> , </symbol>
<stringConstant> function </stringConstant>
<symbol> , </symbol>
<stringConstant> method </stringConstant>
<symbol> , </symbol>
<stringConstant> field </stringConstant>
<symbol> , </symbol>
<stringConstant> static </stringConstant>
<symbol> , </symbol>
<stringConstant> var </stringConstant>
<symbol> , </symbol>
<stringConstant> int </stringConstant>
<symbol> , </symbol>
<stringConstant> char </stringConstant>
<symbol> , </symbol>
<stringConstant> boolean </stringConstant>
<symbol> , </symbol>
<stringConstant> void </stringConstant>
<symbol> , </symbol>
<stringConstant> true </stringConstant>
<symbol> , </symbol>
<stringConstant> false </stringConstant>
<symbol> , </symbol>
<stringConstant> null </stringConstant>
<symbol> , </symbol>
<stringConstant> this </stringConstant>
<symbol> , </symbol>
<stringConstant> let </stringConstant>
<symbol> , </symbol>
<stringConstant> do </stringConstant>
<symbol> , </symbol>
<stringConstant> if </stringConstant>
<symbol> , </symbol>
<stringConstant> else </stringConstant>
<symbol> , </symbol>
<stringConstant> while </stringConstant>
<symbol> , </symbol>
<stringConstant> return </stringConstant>
<symbol> ] </symbol>
<identifier> symbols </identifier>
<symbol> = </symbol>
<symbol> [ </symbol>
<stringConstant> { </stringConstant>
<symbol> , </symbol>
<stringConstant> } </stringConstant>
<symbol> , </symbol>
<stringConstant> ( </stringConstant>
<symbol> , </symbol>
<stringConstant> ) </stringConstant>
<symbol> , </symbol>
<stringConstant> [ </stringConstant>
<symbol> , </symbol>
<stringConstant> ] </stringConstant>
<symbol> , </symbol>
<stringConstant> . </stringConstant>
<symbol> , </symbol>
<stringConstant> , </stringConstant>
<symbol> , </symbol>
<stringConstant> ; </stringConstant>
<symbol> , </symbol>
<stringConstant> + </stringConstant>
<symbol> , </symbol>
<stringConstant> - </stringConstant>
<symbol> , </symbol>
<stringConstant> * </stringConstant>
<symbol> , </symbol>
<stringConstant> / </stringConstant>
<symbol> , </symbol>
<stringConstant> & </stringConstant>
<symbol> , </symbol>
<stringConstant> | </stringConstant>
<symbol> , </symbol>
<stringConstant> < </stringConstant>
<symbol> , </symbol>
<stringConstant> > </stringConstant>
<symbol> , </symbol>
<stringConstant> = </stringConstant>
<symbol> , </symbol>
<stringConstant> ~ </stringConstant>
<symbol> ] </symbol>
<identifier> op </identifier>
<symbol> = </symbol>
<symbol> [ </symbol>
<stringConstant> + </stringConstant>
<symbol> , </symbol>
<stringConstant> - </stringConstant>
<symbol> , </symbol>
<stringConstant> * </stringConstant>
<symbol> , </symbol>
<stringConstant> / </stringConstant>
<symbol> , </symbol>
<stringConstant> & </stringConstant>
<symbol> , </symbol>
<stringConstant> | </stringConstant>
<symbol> , </symbol>
<stringConstant> < </stringConstant>
<symbol> , </symbol>
<stringConstant> > </stringConstant>
<symbol> , </symbol>
<stringConstant> = </stringConstant>
<symbol> ] </symbol>
<keyword> class </keyword>
<identifier> def </identifier>
<identifier> __init__ </identifier>
<symbol> ( </symbol>
<identifier> self </identifier>
<symbol> , </symbol>
<identifier> nameFile </identifier>
<symbol> ) </symbol>
<keyword> if </keyword>
<identifier> nameFile </identifier>
<symbol> . </symbol>
<identifier> endswith </identifier>
<symbol> ( </symbol>
<stringConstant> .pyx </stringConstant>
<symbol> ) </symbol>
<identifier> self </identifier>
<symbol> . </symbol>
<identifier> fdi </identifier>
<symbol> = </symbol>
<identifier> open </identifier>
<symbol> ( </symbol>
<identifier> nameFile </identifier>
<symbol> , </symbol>
<stringConstant> r </stringConstant>
<symbol> ) </symbol>
<identifier> print </identifier>
<symbol> ( </symbol>
<stringConstant> error </stringConstant>
<symbol> ) </symbol>
<identifier> self </identifier>
<symbol> . </symbol>
<identifier> fdo </identifier>
<symbol> = </symbol>
<identifier> open </identifier>
<symbol> ( </symbol>
<identifier> nameFile </identifier>
<symbol> [ </symbol>
<identifier> : </identifier>
<symbol> - </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ] </symbol>
<symbol> + </symbol>
<stringConstant> Tokens.xml </stringConstant>
<symbol> , </symbol>
<stringConstant> w </stringConstant>
<symbol> ) </symbol>
<identifier> def </identifier>
<identifier> Tokenizing </identifier>
<symbol> ( </symbol>
<identifier> self </identifier>
<symbol> ) </symbol>
<identifier> self </identifier>
<symbol> . </symbol>
<identifier> fdo </identifier>
<symbol> . </symbol>
<identifier> write </identifier>
<symbol> ( </symbol>
<stringConstant> <tokens>\n </stringConstant>
<symbol> ) </symbol>
<identifier> flag </identifier>
<symbol> = </symbol>
<identifier> for </identifier>
<identifier> line </identifier>
<identifier> in </identifier>
<identifier> self </identifier>
<symbol> . </symbol>
<identifier> fdi </identifier>
<symbol> . </symbol>
<identifier> readlines </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<identifier> #print </identifier>
<keyword> if </keyword>
<keyword> if </keyword>
<identifier> line! </identifier>
<symbol> = </symbol>
<keyword> if </keyword>
<identifier> not </identifier>
<identifier> flag </identifier>
<symbol> = </symbol>
<identifier> elif </identifier>
<identifier> not </identifier>
<identifier> line </identifier>
<symbol> . </symbol>
<identifier> startswith </identifier>
<symbol> ( </symbol>
<identifier> self </identifier>
<symbol> . </symbol>
<identifier> addLine </identifier>
<symbol> ( </symbol>
<identifier> line </identifier>
<symbol> [ </symbol>
<identifier> :line </identifier>
<symbol> . </symbol>
<identifier> find </identifier>
<symbol> ( </symbol>
<keyword> if </keyword>
<stringConstant> */ </stringConstant>
<identifier> in </identifier>
<identifier> flag </identifier>
<symbol> = </symbol>
<identifier> self </identifier>
<symbol> . </symbol>
<identifier> fdo </identifier>
<symbol> . </symbol>
<identifier> write </identifier>
<symbol> ( </symbol>
<stringConstant> </tokens>\n </stringConstant>
<symbol> ) </symbol>
<identifier> self </identifier>
<symbol> . </symbol>
<identifier> fdo </identifier>
<symbol> . </symbol>
<identifier> close </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<identifier> self </identifier>
<symbol> . </symbol>
<identifier> fdi </identifier>
<symbol> . </symbol>
<identifier> close </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<identifier> def </identifier>
<identifier> addLine </identifier>
<symbol> ( </symbol>
<identifier> self </identifier>
<symbol> , </symbol>
<identifier> line </identifier>
<symbol> ) </symbol>
<identifier> word </identifier>
<symbol> = </symbol>
<stringConstant>  </stringConstant>
<identifier> flag </identifier>
<symbol> = </symbol>
<identifier> for </identifier>
<identifier> tav </identifier>
<identifier> in </identifier>
<keyword> if </keyword>
<identifier> tav </identifier>
<identifier> in </identifier>
<identifier> symbols </identifier>
<identifier> and </identifier>
<identifier> not </identifier>
<identifier> self </identifier>
<symbol> . </symbol>
<identifier> tipulInWord </identifier>
<symbol> ( </symbol>
<identifier> word </identifier>
<symbol> ) </symbol>
<keyword> if </keyword>
<identifier> tav </identifier>
<symbol> = </symbol>
<symbol> = </symbol>
<identifier> ' </identifier>
<symbol> &lt; </symbol>
<identifier> ' </identifier>
<identifier> and </identifier>
<identifier> not </identifier>
<identifier> self </identifier>
<symbol> . </symbol>
<identifier> fdo </identifier>
<symbol> . </symbol>
<identifier> write </identifier>
<symbol> ( </symbol>
<stringConstant> <symbol> &lt; </symbol>\n </stringConstant>
<symbol> ) </symbol>
<identifier> elif </identifier>
<identifier> tav </identifier>
<symbol> = </symbol>
<symbol> = </symbol>
<identifier> ' </identifier>
<symbol> &amp; </symbol>
<identifier> ' </identifier>
<identifier> and </identifier>
<identifier> not </identifier>
<identifier> self </identifier>
<symbol> . </symbol>
<identifier> fdo </identifier>
<symbol> . </symbol>
<identifier> write </identifier>
<symbol> ( </symbol>
<stringConstant> <symbol> &amp; </symbol>\n </stringConstant>
<symbol> ) </symbol>
<identifier> elif </identifier>
<identifier> tav </identifier>
<symbol> = </symbol>
<symbol> = </symbol>
<identifier> ' </identifier>
<symbol> &gt; </symbol>
<identifier> ' </identifier>
<identifier> and </identifier>
<identifier> not </identifier>
<identifier> self </identifier>
<symbol> . </symbol>
<identifier> fdo </identifier>
<symbol> . </symbol>
<identifier> write </identifier>
<symbol> ( </symbol>
<stringConstant> <symbol> &gt; </symbol>\n </stringConstant>
<symbol> ) </symbol>
<identifier> self </identifier>
<symbol> . </symbol>
<identifier> fdo </identifier>
<symbol> . </symbol>
<identifier> write </identifier>
<symbol> ( </symbol>
<stringConstant> <symbol>  </stringConstant>
<symbol> + </symbol>
<identifier> tav </identifier>
<symbol> + </symbol>
<stringConstant>  </symbol>\n </stringConstant>
<symbol> ) </symbol>
<identifier> word </identifier>
<symbol> = </symbol>
<stringConstant>  </stringConstant>
<identifier> elif </identifier>
<identifier> tav </identifier>
<symbol> = </symbol>
<symbol> = </symbol>
<identifier> ' </identifier>
<identifier> ' </identifier>
<identifier> and </identifier>
<identifier> not </identifier>
<identifier> self </identifier>
<symbol> . </symbol>
<identifier> tipulInWord </identifier>
<symbol> ( </symbol>
<identifier> word </identifier>
<symbol> ) </symbol>
<identifier> word </identifier>
<symbol> = </symbol>
<stringConstant>  </stringConstant>
<identifier> elif </identifier>
<identifier> tav </identifier>
<symbol> = </symbol>
<symbol> = </symbol>
<identifier> ' </identifier>
<symbol> / </symbol>
<identifier> t' </identifier>
<identifier> and </identifier>
<identifier> not </identifier>
<identifier> self </identifier>
<symbol> . </symbol>
<identifier> tipulInWord </identifier>
<symbol> ( </symbol>
<identifier> word </identifier>
<symbol> ) </symbol>
<identifier> word </identifier>
<symbol> = </symbol>
<stringConstant>  </stringConstant>
<identifier> elif </identifier>
<identifier> tav </identifier>
<symbol> = </symbol>
<symbol> = </symbol>
<keyword> if </keyword>
<identifier> self </identifier>
<symbol> . </symbol>
<identifier> fdo </identifier>
<symbol> . </symbol>
<identifier> write </identifier>
<symbol> ( </symbol>
<stringConstant> <stringConstant>  </stringConstant>
<symbol> + </symbol>
<identifier> word </identifier>
<symbol> + </symbol>
<stringConstant>  </stringConstant>\n </stringConstant>
<symbol> ) </symbol>
<identifier> flag </identifier>
<symbol> = </symbol>
<identifier> word </identifier>
<symbol> = </symbol>
<stringConstant>  </stringConstant>
<identifier> flag </identifier>
<symbol> = </symbol>
<identifier> word </identifier>
<symbol> = </symbol>
<identifier> word </identifier>
<symbol> + </symbol>
<identifier> def </identifier>
<identifier> tipulInWord </identifier>
<symbol> ( </symbol>
<identifier> self </identifier>
<symbol> , </symbol>
<identifier> word </identifier>
<symbol> ) </symbol>
<identifier> #print </identifier>
<stringConstant> tipulInWord: </stringConstant>
<symbol> , </symbol>
<keyword> if </keyword>
<identifier> word </identifier>
<symbol> = </symbol>
<symbol> = </symbol>
<stringConstant>   </stringConstant>
<identifier> or </identifier>
<identifier> word </identifier>
<symbol> = </symbol>
<symbol> = </symbol>
<stringConstant> \t </stringConstant>
<identifier> or </identifier>
<identifier> word </identifier>
<symbol> = </symbol>
<symbol> = </symbol>
<stringConstant>  </stringConstant>
<identifier> or </identifier>
<identifier> word </identifier>
<symbol> . </symbol>
<identifier> strip </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> = </symbol>
<symbol> = </symbol>
<stringConstant>  </stringConstant>
<keyword> if </keyword>
<identifier> word </identifier>
<identifier> in </identifier>
<identifier> self </identifier>
<symbol> . </symbol>
<identifier> fdo </identifier>
<symbol> . </symbol>
<identifier> write </identifier>
<symbol> ( </symbol>
<stringConstant> <keyword>  </stringConstant>
<symbol> + </symbol>
<identifier> word </identifier>
<symbol> + </symbol>
<stringConstant>  </keyword>\n </stringConstant>
<symbol> ) </symbol>
<identifier> #print </identifier>
<stringConstant> not keywords: </stringConstant>
<symbol> , </symbol>
<identifier> value </identifier>
<symbol> = </symbol>
<keyword> int </keyword>
<symbol> ( </symbol>
<identifier> word </identifier>
<symbol> ) </symbol>
<identifier> self </identifier>
<symbol> . </symbol>
<identifier> fdo </identifier>
<symbol> . </symbol>
<identifier> write </identifier>
<symbol> ( </symbol>
<stringConstant> <integerConstant>  </stringConstant>
<symbol> + </symbol>
<identifier> word </identifier>
<symbol> + </symbol>
<stringConstant>  </integerConstant>\n </stringConstant>
<symbol> ) </symbol>
<identifier> except </identifier>
<identifier> #print </identifier>
<stringConstant> not number: </stringConstant>
<symbol> , </symbol>
<identifier> self </identifier>
<symbol> . </symbol>
<identifier> fdo </identifier>
<symbol> . </symbol>
<identifier> write </identifier>
<symbol> ( </symbol>
<stringConstant> <identifier>  </stringConstant>
<symbol> + </symbol>
<identifier> word </identifier>
<symbol> + </symbol>
<stringConstant>  </identifier>\n </stringConstant>
<symbol> ) </symbol>
<identifier> dir </identifier>
<symbol> = </symbol>
<stringConstant> C:\\Users\\hoday\\source\\repos\\Cython\\Cython\\Tar4 </stringConstant>
<identifier> #dir </identifier>
<symbol> = </symbol>
<stringConstant> ArrayTest </stringConstant>
<identifier> #dir </identifier>
<symbol> = </symbol>
<stringConstant> ExpressionlessSquare </stringConstant>
<identifier> #dir </identifier>
<symbol> = </symbol>
<stringConstant> Square </stringConstant>
<identifier> flag_isDir </identifier>
<symbol> = </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> flag_isDir </identifier>
<symbol> ) </symbol>
<identifier> for </identifier>
<identifier> f1 </identifier>
<identifier> in </identifier>
<identifier> os </identifier>
<symbol> . </symbol>
<identifier> listdir </identifier>
<symbol> ( </symbol>
<identifier> dir </identifier>
<symbol> ) </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> f1 </identifier>
<symbol> . </symbol>
<identifier> endswith </identifier>
<symbol> ( </symbol>
<stringConstant> .pyx </stringConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<identifier> j </identifier>
<symbol> = </symbol>
<identifier> Token </identifier>
<symbol> ( </symbol>
<identifier> dir </identifier>
<symbol> + </symbol>
<stringConstant> / </stringConstant>
<symbol> + </symbol>
<identifier> f1 </identifier>
<symbol> ) </symbol>
<identifier> j </identifier>
<symbol> . </symbol>
<identifier> Tokenizing </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
</tokens>
